		Installation Notes
		==================

This directory contains the sources for the B editor.

The B editor is a separate program, which is called by the B
interpreter when the users wants to edit a unit of permanent target
(by a command like "HOW'TO UNIT...", or ":unit", or "=target").

To compile and load the B editor, say "make" in this directory.

To install it, say "mv a.out .../Bed", where "..." is the directory
where it should live.  (The user never has to call the B editor
directly, therefore it is best installed in a "lib" directory such as
/usr/lib or (if you have it) /usr/local/lib.)

The #define DEDI in the B interpreter must be changed correspondingly
(see file "b0con.h" in the source directory for the B interpreter).


		Configuration Notes
		===================

The editor uses the curses package to perform output to the terminal.
If you don't have this, too bad (but for HP-2621 terminals, there is
hope -- see later).

It also uses the information in the /etc/termcap database to determine
which function keys send which escape sequences.  There must be at
least eight function keys, for the editor commands Widen, Narrow (=
First), Last, Extend, Up-line, Down-line, Previous and Next.  (Four
function keys and four (other) arrow keys will also do.)  Furthermore,
the function and arrow keys should send ESCape first, lest they render
other editor commands editor unreachable (these are ^C, ^D, ^G, ^H, ^I,
^L, ^M, ^P, ^R and ^U).  The editor tries to find out what exactly
your terminal's function and arrow keys send using the codes k1...k8
and ku, kl, kr, kd in /etc/termcap.  If these are not set, it still
recognizes escape sequences as sent by an HP-2621 or a VT-100.

If entries ks and/or ke are defined in /etc/termcap, these are used by
the editor to try to get the terminal in and out of "keypad transmit"
mode.  If your terminal has all sorts of nice features but /etc/termcap
doesn't know about them, try to get your system administrator or guru
to fix it; it's really worth to try this before fiddling with the
editor's sources.

If all this doesn't apply to your favourite terminal, don't despair!
(Though a little bit of desperation would be appropriate.)
First of all, you can enter the necessary escape sequences manually.
Unfortunately they are all at least three characters long, so this
will not do unless you intend to use it hardly.

Therefore, it is better to change the binding of keys to commands.
This can be done by modifying two files: "keys.h" #defines the codes
for single-character commands, and "getc.c" contains a table which maps
multi-character sequences to command codes (actually, it can also map
single characters to other codes -- but the default mapping of single
characters is the character's numerical ASCII value).  I hope the
comments in these files are enough to help you out.  Of course it
is best not to redefine commands which are bound to a mnemonic
control-code; but in some cases this may be necessary.  (As a last
warning, note that some entries in the table in "getc.c" are
modified by the values read from /etc/termcap.  See comments.)


		HP-2621 Users
		=============

For use with the HP-2621 terminal exclusively (or others implementing
a superset of its escape sequences; but NOT the HP-2640 family) there
is an alternative for curses, which is smaller and may address this
type of terminal more efficiently.  It is also the appropriate basis
if you can't get curses and have to hack your way out all by yourself
(I pity you).

The subdirectory "FAKEcurses" contains sources and a Makefile to
construct a library "crlib" with subroutines which are (as far as
the B editor is concerned) compatible with the real curses -- but
they assume your terminal is always an HP-2621 (this isn't even
checked, so watch out!).  To use them, the file "curses.h" must
be copied to the source directory for the editor, and the editor
must be recompiled.  You should hack the Makefile to replace
"-lcurses -ltermcap" by "FAKEcurses/crlib" (no "-l" !).

Of course, perfectionists can try to have the best of two worlds,
maintain two versions, and use a shell script to call the editor
that decides which version to use dependent on  $TERM.  I wouldn't


 	The GOTO command on non-HP-2621 terminals
	=========================================

One terminal-dependency remains: the GOTO command (control-G) only
works on HP-2621 terminals.  It is not essential, but on some
terminals it may be possible to fix this.

This can only work for terminals with a "mouse" or terminals (like the
HP-2621) where the user can move the cursor without the computer
knowing it, AND which can on request transmit the current cursor
position to the computer.

Since there is no way to find out how this is done on a particular
terminal (/etc/termcap doesn't know about it), the code is necessarily
terminal-dependent.  It can all be found in file "term.c", mainly in
the routine sense(); a check for the proper terminal type appears
in ttylookup().
